-- Trigger para la tabla users_tb
CREATE OR REPLACE TRIGGER FIDE_USERS_TB_ID_TRG
BEFORE INSERT ON FIDE_USERS_TB
FOR EACH ROW
BEGIN
    IF :NEW.user_id IS NULL THEN
        SELECT NVL(MAX(user_id), 0) + 1 INTO :NEW.user_id FROM FIDE_USERS_TB;
    END IF;
END;
/

-- Trigger para la tabla address_tb
CREATE OR REPLACE TRIGGER FIDE_ADDRESS_TB_ID_TRG
BEFORE INSERT ON FIDE_ADDRESS_TB
FOR EACH ROW
BEGIN
    IF :NEW.address_id IS NULL THEN
        SELECT NVL(MAX(address_id), 0) + 1 INTO :NEW.address_id FROM FIDE_ADDRESS_TB;
    END IF;
END;
/

commit;


-- Trigger para la tabla product_tb
CREATE OR REPLACE TRIGGER FIDE_PRODUCT_TB_ID_TRG
BEFORE INSERT ON FIDE_PRODUCT_TB
FOR EACH ROW
BEGIN
    IF :NEW.product_id IS NULL THEN
        SELECT NVL(MAX(product_id), 0) + 1 INTO :NEW.product_id FROM FIDE_PRODUCT_TB;
    END IF;
END;
/

commit;

-- Trigger para la tabla inventory_tb
CREATE OR REPLACE TRIGGER FIDE_INVENTORY_TB_ID_TRG
BEFORE INSERT ON FIDE_INVENTORY_TB
FOR EACH ROW
BEGIN
    IF :NEW.inventory_id IS NULL THEN
        SELECT NVL(MAX(inventory_id), 0) + 1 INTO :NEW.inventory_id FROM FIDE_INVENTORY_TB;
    END IF;
END;
/

commit;

-- Trigger para la tabla inventory_LINES_tb
CREATE OR REPLACE TRIGGER FIDE_INVENTORY_LINES_TB_ID_TRG
BEFORE INSERT ON FIDE_INVENTORY_LINES_TB
FOR EACH ROW
BEGIN
    IF :NEW.inventory_lines_id IS NULL THEN
        SELECT NVL(MAX(inventory_lines_id), 0) + 1 INTO :NEW.inventory_lines_id FROM FIDE_INVENTORY_LINES_TB;
    END IF;
END;
/

commit;


-- Trigger para la tabla inventory_LINES_tb rellenar reserva
CREATE OR REPLACE TRIGGER FIDE_INVENTORY_LINES_TB_RESERVA_TRG
BEFORE INSERT ON FIDE_SAMDESIGN.FIDE_INVENTORY_LINES_TB
FOR EACH ROW
BEGIN
  IF :NEW.Quantity_Stocked IS NOT NULL THEN
    :NEW.Quantity_Reserved := ROUND(:NEW.Quantity_Stocked * 0.20);
    :NEW.Quantity_Stocked  := :NEW.Quantity_Stocked - :NEW.Quantity_Reserved;
  END IF;
END;
/


--REVISAR TRIGGER PARA FACTURACION
--POSIBLE SOLUCION

CREATE OR REPLACE TRIGGER FIDE_EJEMPLO_SEQ_TB_ID_TRG
BEFORE INSERT ON FIDE_EJEMPLO_SEQ_TB
FOR EACH ROW
BEGIN
:NEW.ID_EMPLEADO:= GENERAR_SEQ_ALFANUMERICA();
END;

CREATE OR REPLACE FUNCTION GENERAR_SEQ_ALFANUMERICA RETURN VARCHAR2 AS
V_LETRA CHAR(1);
V_SEQUENCIA VARCHAR2(100);
BEGIN 
V_LETRA:=CHR(65+TRUNC(DBMS_RANDOM.VALUE(0,27)));
V_SEQUENCIA :=TO_CHAR(SYSDATE, 'DDMMYYYY') ||'-'||FIDE_EJEMPLO_SEQ.NEXTVAL ||'-'||V_LETRA;
RETURN V_SEQUENCIA;
END GENERAR_SEQ_ALFANUMERICA;

SELECT GENERAR_SEQ_ALFANUMERICA FROM DUAL;

-- Trigger para la tabla order_tb
CREATE OR REPLACE TRIGGER FIDE_ORDER_TB_ID_TRG
BEFORE INSERT ON FIDE_ORDER_TB
FOR EACH ROW
BEGIN
    IF :NEW.Order_ID IS NULL THEN
        SELECT NVL(MAX(Order_ID), 0) + 1 INTO :NEW.Order_ID FROM FIDE_ORDER_TB;
    END IF;
END;
/

-- Trigger para usuarios: autollenado de timestamps
CREATE OR REPLACE TRIGGER FIDE_USERS_TB_TIMESTAMP_TRG
BEFORE INSERT OR UPDATE ON FIDE_USERS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.Created_On := SYSDATE;
    END IF;
    :NEW.Modified_On := SYSDATE;
END;
/

-- Trigger para la tabla order_lines_tb
CREATE OR REPLACE TRIGGER FIDE_ORDER_LINES_CHECK_STOCK
BEFORE INSERT ON FIDE_ORDER_LINES_TB
FOR EACH ROW
DECLARE
  v_stock NUMBER;
BEGIN
  SELECT Quantity_Stocked INTO v_stock
  FROM FIDE_INVENTORY_LINES_TB
  WHERE Product_ID = :NEW.Product_ID;

  IF v_stock < :NEW.Qty_Item THEN
    RAISE_APPLICATION_ERROR(-20001, 'No hay suficiente stock para este producto.');
  END IF;
END;
/

-- Trigger para la tabla order_lines_tb
CREATE OR REPLACE TRIGGER FIDE_ORDER_LINES_UPDATE_STOCK
AFTER INSERT ON FIDE_ORDER_LINES_TB
FOR EACH ROW
BEGIN
  UPDATE FIDE_INVENTORY_LINES_TB
  SET Quantity_Stocked = Quantity_Stocked - :NEW.Qty_Item
  WHERE Product_ID = :NEW.Product_ID;
END;
/

-- Trigger para la tabla order_lines_tb: descuenta stock automÃ¡ticamente
CREATE OR REPLACE TRIGGER FIDE_ORDER_LINES_UPDATE_STOCK
AFTER INSERT ON FIDE_ORDER_LINES_TB
FOR EACH ROW
BEGIN
  UPDATE FIDE_INVENTORY_LINES_TB
  SET Quantity_Stocked = Quantity_Stocked - :NEW.Qty_Item
  WHERE Product_ID = :NEW.Product_ID;
END;
/


